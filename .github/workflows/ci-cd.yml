name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test -- --passWithNoTests

      - name: Build
        run: npm run build

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm install

      - name: Build
        run: npm run build

      - name: Deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ap-south-1
        run: |
          npm install -g aws-cli
          aws s3 sync build/ s3://react-netflix-gpt --delete
          aws s3 website s3://react-netflix-gpt --index-document index.html --error-document index.html

      - name: Bump Version and Tag
        id: tag_version
        run: |
          # Get the current version from the latest tag or default to 1.0.0
          VERSION=$(git describe --tags --abbrev=0 || echo "1.0.0")
          echo "Current version: $VERSION"

          # Increment the version number
          VERSION_PARTS=(${VERSION//./ })
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          PATCH=$((PATCH+1))
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"

          # Configure Git user for the action
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          # Create a new tag for the new version
          git tag $NEW_VERSION
          git push origin $NEW_VERSION

          # Output the new version number
          echo "::set-output name=new_version::$NEW_VERSION"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag_version.outputs.new_version }}
          release_name: Release ${{ steps.tag_version.outputs.new_version }}
          body: |
            ## Changes
            - Description of changes in this release.
          draft: false
          prerelease: false

      - name: Upload build directory as release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build.zip
          asset_name: build.zip
          asset_content_type: application/zip
